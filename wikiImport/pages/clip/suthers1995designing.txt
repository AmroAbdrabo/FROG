h2. Highlights

Groupware for learning may differ from that for other soft- ware in a crucial way: optimizing software support for sub- tasks can degrade overall collaborative learning. This point is illustrated in the context of a software environment for sup- porting student’s learning to engage in critical discussion of competing scientific theories. Our experience suggests that in applications where a nontrivial portion of the discourse is external to the software, some exceptions to locally useful interface designs may be encountered, even for supposedly well understood subtasks. [[skimx://suthers1995designing#1|p. 1]]

A number of researchers have experimented with hypertext systems and graphical interfaces for supporting argumentation [1, 2, 6]. For the most part, these systems are designed to provide either a medium for a generic competent reasoner, or support for a specialized ex- pert user in a specific professional practice. The “Belvedere” effort seeks to support the development of scientific argu- mentation skills in young students. These students can’t be presumed to have either general skills of constructing argu- ments or the specific knowledge of a domain. Therefore, the design of Belvedere has had to address the cognitive and mo- tivational limitations and requirements of these unpracticed beginners, as presented in the psychological literature and as we encountered them in formative testing with students. [[skimx://suthers1995designing#1|p. 1]]

Briefly, these limitations include (1) difficulty recognizing abstract relationships implicit in scientific theories and argu- ments, (2) difficulty focusing attention on particular problems encountered in the construction and evaluation of complex arguments, (3) lack of domain knowledge, and (4) lack of motivation. Belvedere addresses these limitations by (1 and 2) giving arguments a concrete diagrammatic form, (2) pro- viding an automated, on-demand argumentation advisor, (3) providing access to on-line information resources; and (3 and 4) supporting students working in small groups to construct documents to be shared with others [4, 5]. [[skimx://suthers1995designing#1|p. 1]]

engaging in processes of theory criticism and revision that are encountered in the real world. Investigation of whether immediate enforcement of semantics, feedback on request, or no feedback at all has a better qualitative effect on the user’s discussions is ongoing. The point, again, is that this is a nontrivial issue, illustrating that interface features that are considered to be “good” for certain subtasks may be subop- timal for the larger task of interest. [[skimx://suthers1995designing#2|p. 2]]

The emphasis on stimulating critical discussion complicates the criteria for interface design. Although we design to make it easy to construct diagrammatic representations of the di- alectical aspects of science, we also design to stimulate ex- ternal discourse that need not be recorded in the diagram. We have found that the latter goal can overrule the utility features we would otherwise provide in support of the former. This point is illustrated with a few examples. [[skimx://suthers1995designing#2|p. 2]]

Design to support discourse processes must transcend the representa- tional environment of the software itself, even in software that specifically relies on the utility of online representations for discourse. User’s discourse processes take place in the social environment as well as within the representational and computational resources provided by support software. Thus, the utility of software features should be evaluated in terms of how well they stimulate the right kind of activity in the total human-computer system. We do not assume that local optimization of software support for isolated subtasks (e.g., making “correct” argument diagrams) always optimizes over- all task performance. Rather, our main question is: What kind of discourse is facilitated or stimulated by each feature of the interface and of the task posed to the students, and what kind of discourse is inhibited? [[skimx://suthers1995designing#2|p. 2]]

Statements in Belvedere are embedded in shapes that repre- sent their epistemological status (e.g., as “theory,” “claim,” or “data;” see figure 1). Users often discuss the epistemological status of a statement before representing it in the diagram. An object can only have one shape at a time; therefore their discussion of the epistemological status cannot be part of the diagram. Is this a design flaw of the graphical language? Should we use an epistemologically noncommittal represen- tation for statements, and provide annotations with which users can record any disagreement concerning the epistemo- logical status of a statement? If the goal is to “push” all discussion into the interface, perhaps these questions are an- swered in the affirmative. However, it may be useful to force a decision prior to entry in the diagram precisely because it stimulates discussion towards making the decision. Oth- erwise students might never care to discuss the difference between “data,” “claims,” “hypotheses,” and “theories.” We have not resolved this issue, but the present point is that it is a nontrivial issue. It illustrates the danger of assuming that optimizing a representation with respect to criteria of epis- temological adequacy will constitute an optimization of the representation with respect to the larger task of interest. [[skimx://suthers1995designing#2|p. 2]]

Enforcement of semantic constraints provides another exam- ple. In some versions of Belvedere, semantic constraints on the links are not enforced. For example, an “explains” link can be drawn from data to theory as well as from the- ory to data (figure 1). (Instead of enforcement, we provide an “Advisor” that, at the user’s request looks for these and other semantic anomalies that can be detected on a purely formal basis, and makes suggestions for improvements.) If Belvedere were a CAD tool for use by expert members of some community of practice, there would be no point in al- lowing users to make such errors. However, Belvedere can- not be a CAD tool because its users do not yet share standard terminology and practice in argumentation. Furthermore, in a learning environment we must consider the role of “errors” in the learning process. Some errors may be so superficial that they are not likely to result in a useful learning experi- ence. The interface should be designed to make these errors impossible. Users may more quickly develop a shared ter- minology based on constructs whose semantics are enforced. On the other hand, delayed or absent feedback may be more appropriate for incomplete or problematic patterns of argu- mentation. Immediate “correction” could prevent users from [[skimx://suthers1995designing#2|p. 2]]

