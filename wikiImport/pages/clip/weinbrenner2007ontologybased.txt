h2. Highlights (65%)

Abstract. Ontology support has been incorporated into a design environment for inquiry learning scenarios in the context of an ongoing European project. The underlying ontology is being elaborated as an interdisciplinary agreement on basic concepts, their relationships and attributes between designers and developers. The ontology encapsulates concepts such as “pedagogical plan”, “scenario”, “learning activity”, or “tool” together with compatibility relations. This forms the semantic basis of a cooperative graphical editing environment. Similarity measures addressing structural aspects (graph matching) as well as semantic similarities allow for generating social recommendations in the SCY2 design community. [[skimx://weinbrenner2007ontologybased#1|p. 1]]

there is a common agreement in the TEL community that ontologies can enhance and enrich learning environments, e.g. in the form of compentence ontologies used for learner profiling [1] or for building a framework for instructional and learning theories [2]. [[skimx://weinbrenner2007ontologybased#1|p. 1]]

Our approach uses semantic representations (in the form of an ontology) as an internal resource in a specific learning environment that is currently being developed in the new European research project SCY. In this sense, our approach differs from a general "semantic web" approach (cf. [3]), which would extend to a larger and open collection of web resources. From an educational perspective, an obvious added value of using an ontology is to define a set of terms and their relations and then use these as a shared vocabulary. This shared vocabulary can then serve as a common verbal denominator for a development and design group to synchronise and co-align their wording and conceptual perspectives. By doing that an ontology can help to avoid misunderstandings and to improve the precision of communication in general. [[skimx://weinbrenner2007ontologybased#1|p. 1]]

In addition to the provision of a shared vocabulary, an [[skimx://weinbrenner2007ontologybased#1|p. 1]]

ontology may help inferring semantic relations between objects and thus may indicate recommendations or possible flaws in a certain domain. [[skimx://weinbrenner2007ontologybased#2|p. 2]]

In this paper we elaborate on the communication and conceptualisation perspective by introducing specific system support through providing ontology-aware tools for educational designers. In this sense, our target situation is very similar to the one of the SMARTIES scenario editing en vironment based on the pedagogical ontology OMNIBUS [4]. However, in our approach there is no given equivalent of OMNIBUS as a general basis of pedagogical concepts and patterns, which are used as generic or foundational concepts to underpin specific designs. Instead, the SCY ontology with different sections addressing domain knowledge, pedagogical and task concepts is being built up according to the needs and specific choices (e.g., example domains) of the project, specifically oriented towards inquiry style learning. Also, we do not want to encompass a large variety of pedagogical approaches to be modelled in detail but concentrate on SCY specific methods of teaching and learning. Rather than defining these in very flexible, generic form (as in OMNIBUS), we aim at practically oriented blueprints without capturing “pedagogical causality”. [[skimx://weinbrenner2007ontologybased#2|p. 2]]

In general, ontologies can capture semantics (concepts) from domains of interest as well as methodological and task knowledge and support reflection and self-description in the context of the system environment. As for our SCY project, we see the following specific roles of ontologies: Represent terminological/semantic basis for human-human interdisciplinary exchange; Serve as meta-level description for storage structures (repositories); Standardise and interlink metadata vocabulary (e.g., for the learning objects created by the students, domain and student models); Provide basic concepts for the definition of agent behaviour on a semantic level; Facilitate high level inter-operability between tools and services. [[skimx://weinbrenner2007ontologybased#2|p. 2]]

It has turned out turns that building up an ontology for the SCY project both enforced and established an agreement on the basic terminology in terms of concepts, their relationships, and attributes between designers and developers from different academic disciplines. The ontology encapsulates the agreements on basic terms such as “mission”, “pedagogical plan”, “scenario”, “learning activity”, “tool”, or “scaffold” together with lexical enumerations of certain elements (activities, tools, types of learning objects) and their compatibility relations. This forms the semantic basis of the editing environment. Similarity measures addressing structural aspects (graph matching) as well as semantic similarities allow for generating social recommendations in the SCY design community. [[skimx://weinbrenner2007ontologybased#2|p. 2]]

SCY integrates a number of different tools, background material, collaborative activities, etc. to form “missions”, which are then accomplished by groups of learners in an environment called “SCY-Lab”. SCY-Lab provides adaptive support and pedagogical scaffolds to help learners on their missions. One central aspect in SCY are “emerging learning objects” (ELOs) [5], which denote [[skimx://weinbrenner2007ontologybased#2|p. 2]]

re-usable, sharable products of learning activities, created by students themselves, rather than traditional learning objects, which are typically used in the sense of pre- fabricated learning material. [[skimx://weinbrenner2007ontologybased#3|p. 3]]

At the very beginning of SCY, it became obvious that the expected, complex interplay of tools, activities, scaffolds and ELOs needs to have an external representation for discussion, authoring, exchange, and potentially to be machine- readable and machine-interpretable. A number of languages and tools for the design and storage of learning processes are available, like IMS-LD3, LAMS [6] and COML [7], each with particular strengths and weaknesses. For example, IMS-LD strongly builds on XML representations, which are hardly comprehensible for non-experts. LAMS appears as an combined authoring-player suite that makes it hard to integrate third party tools and COML focuses on the use and integration of hardware like mobile devices or shared displays. However, one strong deficit of all these approaches with respect to the SCY requirements is the lack of support for emerging learning objects. These shortcomings called for the development of a comprehensible, flexible and pedagogical neutral learning design language. As a result, the concept and graphical representation of so-called Learning Activity Spaces (“LAS”) emerged, which is described in detail in [8]. A LAS is defined as a coherent and intuitive set of activities supported with specific tools and scaffolds. The input and output of a LAS are described in terms of a set of artefacts usually created by students (i.e. the ELOs). Based on these premises, a graph-based modelling tool has been developed to support the creation and exchange of LASs. This tool, called “SCY Scenario Editor” (or “SCY-SE”), builds on the graph-based modelling tool FreeStyler and enhances it through the use of ontologies. To be flexible and to provide a high degree of representational freedom, but still be able to interpret and intelligently support a designer, the SCY-SE tool relies on an ontology in the backend. The ontology contains a representation of available tools, activities, types of ELOs, scaffolds and the relations between those entities and is able to provide information to identify possible LAS elements, to give recommendations and to discover discrepancies in the LAS design. In the SCY project, the same ontology is planned to be used for other purposes, too, like query extension when searching for ELOs, identifying applicable tools for an ongoing learning activity or for deciding on an appropriate scaffold for the current situation. However, this paper deals with the usage of ontologies in a graph-based learning design editor. The following chapters will elaborate on technical requirements and use cases of ontology-based models for pedagogical scenarios. [[skimx://weinbrenner2007ontologybased#3|p. 3]]

Our approach uses a blackboard architecture for the backend, both as a container for the evolving ontologies as well as a communication medium for additional agents. Such a blackboard system comprises a central server with several clients that interact with each other only indirectly by exchanging information through the blackboard [9]. [[skimx://weinbrenner2007ontologybased#3|p. 3]]

Following a distributed problem-solving paradigm, the blackboard approach is very [[skimx://weinbrenner2007ontologybased#3|p. 3]]

appropriate in situations with multiple clients or agents that have quite different functionalities and differing implementation styles. In these situations, in which a problem solving strategy is divided into several steps with each step covered by one agent, there is often an implicit order of processing a query, but without having tightly connected components, i.e. without any explicit, external ordering. This corresponds to a “loose coupling” approach, which essentially means that all participating components were designed using minimal assumptions on the knowledge and awareness of each other. These minimal assumptions lead to a high robustness and failure tolerance and make it easy for designers to flexibly adapt the architecture. [[skimx://weinbrenner2007ontologybased#4|p. 4]]

TupleSpaces, as introduced by [10] together with the Linda language for distributed processing, are a well known means to implement a blackboard architecture. Here, a central server acts as a relay station for exchanging messages. These messages are stored in the form of tuples, i.e. in ordered sequences of typed literals. The most prominent recent implementations are JavaSpaces (Sun Microsystems) and TSpaces by IBM [11]. Our ontology backend, however, is built on top our own implementation called SQLSpaces [9]. Since the SQLSpaces were developed on top of a relational database, they have an inherent support for persistent and efficient data storage and provide transactions. Additionally to typical convenience features of other TupleSpaces implementations like asynchronous notifications (callbacks), automatic expiration of tuples, blocking and non-blocking commands, bounded queries, a graphical web- interface and a user management, the SQLSpaces have other, new features like multi- language support (currently supported languages are Java, C#, Ruby, Prolog and PHP), wildcard fields, space-based rights management and versioning. [[skimx://weinbrenner2007ontologybased#4|p. 4]]

The SQLSpaces are the technical foundation for the actual ontology management facility called SWAT (Semantic Web Application Toolkit). It has been developed by the Collide Research Group in the Ontoverse project [12] that aimed at developing a web-based platform for collaborative ontology creation in the Life Sciences. SWAT is a framework that uses the SQLSpaces as a platform for a multi-agent system that encapsulates all the functionality in several agents coordinated via the SQLSpaces platform. Therefore, it uses several spaces inside the SQLSpaces server as disjoint communication channels. [[skimx://weinbrenner2007ontologybased#4|p. 4]]

FreeStyler [13] is a collaborative modelling environment based on the idea of shared workspaces offering freestyle-sketching as well as different visual languages. FreeStyler can be used in collaborative as well as in single-user scenarios . The support for different representations is very flexible, as it based on a plugin-framework for graph-based visual languages that can be implemented as plugins through a common interface or API. This API was also used to implement the user frontend of the scenario-editor. Figure 2 shows an example scenario design, which consists of several ELOs (green diamonds) and LASs with substructures (blue boxes) thus illustrating the two levels of representation (macro level: senarios / micro level: LASs). [[skimx://weinbrenner2007ontologybased#5|p. 5]]

4.1. Possible Values As described in section 2, the graphical modelling language uses the notion of a LAS, which forms the low level structure consisting of atomic building blocks like tools and activities. Furthermore, there are concepts like LAS types, activity types, concrete tools and ELO types. For each of these concepts there is a limited number of possible values to be chosen from a designer. However, it would be quite inflexible to have these lists of possible values hard coded to the application. Therefore, these lists are fetched from the ontology, where they are represented as instances of the corresponding concepts. Using the ontology as a knowledge store for all possible values of certain assignments makes it easy to extend the lists without changing the actual application code and it gives the possibility of changing the values at runtime. [[skimx://weinbrenner2007ontologybased#6|p. 6]]

4.2. Recommendations Another way of using the ontology is to make specific recommendations of values according to the context. In the SCY project it has been clearly defined what activities are useful and adequate in which kinds of LASs. However, these relations between LASs and activities are not mandatory, so it is also possible to create LASs comprising not recommended activities. The recommendations are shown in SCY-SE as green “checks” (meaning “everything is fine”) or yellow warning symbols (meaning “this is not recommended, though might be ok”) in the activities drop-down box and are of course context-sensitive depending on the LAS this activity is located in. Similar recommendations can relate to the formats a tool supports (not yet implemented), so that the application itself would warn a user who tries to consume or produce an ELO with a tool that is not capable of processing this type of data. [[skimx://weinbrenner2007ontologybased#6|p. 6]]

4.3. Warnings SCY-SE can check for several types of constraints and constraint violations in given designs, some of which are ontology based. The simpler, obvious ones apply to the way nodes are connected. Considering the notion of input and output ELOs, it is obvious that these nodes have a natural direction that edges to them should follow. Therefore, an output ELO needs some activity that produces it and an input ELO needs some activity that consumes it. In addition, it does not make any sense for an activity to produce an input ELO, because this ELO is the output ELO of some other LAS, where it has already been produced etc. Moreover, ELOs can have more or less precisely defined types. These types also have a relation to the tools (that support activities), because the tools need to be compatible with this type. Constraints like the directions of connections between ELOs and activities are quite simple and do not need any background domain knowledge in an ontology, whereas the compatibility of formats and tools are obviously well stored in ontological structures. [[skimx://weinbrenner2007ontologybased#6|p. 6]]

4.4. Similarity It is of course possible to save learning designs that were created with SCY-SE as XML files. However, it might also be an advantage to have a central server, where all users can store and exchange their results. Having such a central repository has mainly two purposes: On the one hand, it might support the designer in finding similar scenarios. Access to similar scenarios may help to improve the currently developped design by comparison and reuse. On the other hand, the list of similar scenarios can be seen as a mediating object between several designers. This retrieval mechanism uses some basic mathematical principles such as distance measure and grpah matching techniques as well as relations from the ontology (for determining what is more related and similar) in the calculation of similarity. [[skimx://weinbrenner2007ontologybased#7|p. 7]]

Startup: fetch instances of LASs, activities, tools, ELO types LAS editing: compatibility between LAS and activity Save: checking based on possible relations between the ontology entities Retrieval: similarity-based search for other scenarios [[skimx://weinbrenner2007ontologybased#8|p. 8]]

6. Next Steps In the work presented so far the modelling tool FreeStyler has been extended with a plugin to describe abstract learning scenarios in the context of the SCY project. The possibility to describe these scenarios leads to a next step: Instantiating those abstract “pedagogical plans” towards concrete task-related “missions”. The designed scenarios can be a basis for these missions, which can be enriched by domain specific content. By using the ontology as a common repository for the elements of the scenarios and by the ontology-based checking mechanism, it is guaranteed that the designed scenarios are consistent with the core concepts of the SCY project. [[skimx://weinbrenner2007ontologybased#9|p. 9]]

References [1] Kalz, M., J.v. Bruggen, E. Rusman, B. Giesbers, and R. Koper, Positioning of Learners in Learning Networks with Content-Analysis, Metadata and Ontologies. Interactive Learning Environments, 15.2007. [2] Hayashi, Y., J. Bourdeau, and R. Mizoguchi. Ontological Support for a Theory-Eclectic Approach to Instructional and Learning Design. in Proceedings of the European Conference on Technology Enhanced Learning (EC-TEL 2006). 2006. Crete, Greece. [3] Devedžić, V., Semantic Web and Education (Integrated Series in Information Systems). 2006: Springer-Verlag New York, Inc. [4] Hayashi, Y., J. Bourdeau, and R. Mizoguchi. Toward Establishing an Ontological Structure for the Accumulation of Learning/Instructional Design Knowledge. in Proc. of 6th International Workshop on Ontologies and Semantic Web for E-Learning (SWEL '08). 2008. Montreal, Canada. [5] Hoppe, H.U., N. Pinkwart, M. Oelinger, S. Zeini, F. Verdejo, B. Barros, and J.L. Mayorga. Building Bridges within Learning Communities through Ontologies and Thematic Objects. in Proc. of the International Conference on Computer Supported Collaborative Learning (CSCL 2005). 2005. Taipei, Taiwan. [6] Dalziel, J.R. Implementing Learning Design: The Learning Activity Management System (LAMS). in Interact, Integrate, Impact: Proceedings of the 20th Annual Conference of the Australasian Society for Computers in Learning in Tertiary Education. 2003. Adelaide, Australia. [7] Niramitranon, J., M. Sharples, and C. Greenhalgh. COML (Classroom Orchestration Modelling Language) and Scenarios Designer: Toolsets to Facilitate Collaborative Learning in a One-to-One Technology Classroom. in Proceedings of the International Conference on Computer in Education (ICCE2007). 2006. Hiroshima, Japan. [8] Lejeune, A., M. Ney, A. Weinberger, M. Pedaste, L. Bollen, T. Hovardas, H.U. Hoppe, and T.d. Jong. Learning Activity Spaces: Towards flexibility in learning design? in Proc. of the 9th IEEE International Conference on Advanced Learning Technologies (ICALT 2009). 2009. Riga, Latvia. [9] Weinbrenner, S., A. Giemza, and H.U. Hoppe. Engineering heterogenous distributed learning environments using TupleSpaces as an architectural platform. in Proc. of the 7th IEEE International Conference on Advanced Learning Technologies (ICALT 2007). 2007. Los Alamitos (USA): IEEE Computer Society. [10] Gelernter, D., Generative Communication in Linda. Acm Transactions on Programming Languages and Systems, 7(1).1985. p. 80-112. [11] Wyckoff, P., S.W. McLaughry, T.J. Lehman, and D.A. Ford, T spaces. IBM Syst. J., 37(3).1998. p. 454-474. [12] Malzahn, N., S. Weinbrenner, P. Hüsken, J. Ziegler, and H.U. Hoppe. Collaborative Ontology Development - Distributed Architecture and Visualization. in Proceedings of the German E- Science Conference. 2007. Baden-Baden, Germany: Max Planck Digital Library. [13] Hoppe, U. and K. Gassner. Integrating collaborative concept mapping tools with group memory and retrieval functions. in Proceedings of the International Conference on Computer Supported Collaborative Learning (CSCL2002). 2002. Hillsdale (USA): Lawrence Erlbaum. [14] Kuhn, H.W., The Hungarian method for the assignment problem. Naval Research Logistics Quarterly, 2.1955. p. 83-97. [[skimx://weinbrenner2007ontologybased#10|p. 10]]

