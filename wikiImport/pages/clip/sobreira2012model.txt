h2. Highlights (3%)

Operationalization of scripts is “the process of going from an abstract and technologically-independent description of the script to the effective setting the students will be presented with, i.e., the precise description of the tasks, groups, constraints to be respected, and technological setting to be used” (Tchounikine [[skimx://sobreira2012model#568|p. 568]]

Such topics include identification of conceptual primitives to model and represent scripts (Kobbe et al. 2007), review of issues and a general model for operationalization of scripts in technical settings (Tchounikine 2008), analysis of the mechanics of scripts (Dillenbourg and Hong 2008) and an approach for implementing [[skimx://sobreira2012model#568|p. 568]]

a given script in a broad variety of platforms [[skimx://sobreira2012model#568|p. 568]]

(Wecker et al. 2010). [[skimx://sobreira2012model#568|p. 568]]

In this article, we continue this on-going effort to study operationalization issues, focusing on a specific concern: offering representation means that (1) are sufficiently simple and flexible to allow teachers to edit a script and adapt it to their view and context, and (2) can be extended to match other needs or implement advanced features such as representing complex grouping mechanisms, checking constraints or configuring the software students will be offered. [[skimx://sobreira2012model#568|p. 568]]

Enactment frameworks may correspond to different realities. Examples are a piece of software specifically dedicated to a specific script or script-family and implementing part of the script-specific support and constraints, e.g., the specific systems implementing the Argue-Graph or ConceptGrid scripts (Dillenbourg and Hong 2008), a complex generic environment whose features can be organized to fit a given script’s needs, e.g., the CeLS environment (Ronen et al. 2006), a platform providing support on top of diverse Web contents (Wecker et al. 2010), or a basic Learning Management System (LMS) offering general features, e.g., Moodle (2012). [[skimx://sobreira2012model#569|p. 569]]

The T2 model is an intentionally simple model designed to facilitate editing and adaptation of macro-scripts within an open perspective to script editing. [[skimx://sobreira2012model#571|p. 571]]

In our current work, we reuse the notions proposed in (Kobbe et al. 2007): activities (what must be done), participants (individuals), groups, roles and resources (virtual or physical objects used, modified or produced by the participants). The rationale for using this framework is that it has been elaborated as a consensus by scientists from several fields (educational, cognitive and computer sciences) as a result of their experiences in specifying CSCL scripts, has proven it can model a variety of macro-scripts of different types, and is fairly intuitive (as confirmed by our usability test). [[skimx://sobreira2012model#573|p. 573]]

With respect to the original framework, we add the option of tagging resource labels to identify whether they are offered (-in) or produced (-out) by students [[skimx://sobreira2012model#573|p. 573]]

We shall now examine how the model basic expressiveness may be enhanced. For this purpose, we will refer to Kobbe and his colleagues’ framework, which highlights three important mechanisms. Group formation specifies how groups of participants are [[skimx://sobreira2012model#578|p. 578]]

constructed. Task distribution specifies how components (e.g., activities, roles or resources) must be distributed among participants or groups. Finally, sequencing specifies how the script’s phases or tasks will be distributed over time. [[skimx://sobreira2012model#579|p. 579]]

