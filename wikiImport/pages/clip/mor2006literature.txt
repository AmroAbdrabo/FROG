h1. Clippings

* Highlight, page 5

Design patterns are suggested as an enabling tool for good practice, by facilitating pattern-specific communication and knowledge sharing between participants. These patterns are termed learning patterns, and they will be available as an outcome of this project.



* Highlight, page 6

Specifically, we promote the use of a design patterns approach in order to facilitate good learning design practice. This is characterised as a process of developing learning patterns, which will form one of the outputs of this project.



* Text Note, page 6

Difference between design patterns and learning patterns?



* Text Note, page 8

Problem of well-designed pedagogies with poor gameplay, or very slick games with superficial pedagogy/content. Different vocabularies among different professional groups. 



* Highlight, page 8

• Knowledge integration from multiple disciplines • Communication of ideas and concepts between parties



* Highlight, page 9

Design patterns (Alexander, 1978; 1979) were conceived as a means of encapsulating expert knowledge in an accessible form, so as to empower non-experts to actively participate in the design processes.



* Highlight, page 9

. A pattern language for the design of mathematical games would have to afford expression of knowledge from all related domains, and its calibration. Such a language would facilitate a culture of communication among the different communities without necessitating costly organizational structures. Such a culture has emerged over the last decades in what is arguable the most complex and intense area of design activity: the construction of large software systems. In this domain the use of design patterns has been very successful. In their seminal book Gamma et al (1995) argue: One thing expert designers know not to do is solve every problem from first principles. Rather, they reuse solutions that have worked for them in the past. ... Consequently, you’ll find recurring patterns of classes and communicating objects in many object- oriented systems. These patterns solve specific design problems and make ... designs more flexible, elegant, and ultimately reusable. They help designers reuse successful designs by basing new designs on prior experience. A designer who is familiar with such patterns can apply them immediately to design problems without having to rediscover them. (Gamma et al, 1995)



* Highlight, page 9

Appropriating the ideas of Christopher Alexander, they provided a standard template for software design patterns and taxonomy of 26 patterns. Since then, numerous pattern books, conferences and web sites have proliferated and spread into every aspect of software related design and production. These patterns and pattern languages enable designers to share discuss and aggregate their knowledge across wide, distributed and diverse communities.



* Highlight, page 9

Recently, the concept of design patterns has made its first strides in educational domains. One such domain is that of educationally oriented software systems, such as e-learning systems (Derntl & Motschnig-Pitrik, 2004); another is the design of computer science 9 courses (Bergin, 2000).



* Highlight, page 10

courses (Bergin, 2000).



* Highlight, page 10

A culture in which games are familiar resources, constructed, adapted and modulated by practitioners to meet immediate objectives, much in the same way as a book or a whiteboard diagram would be used. A design pattern used in this way will be referred to as a learning pattern.



* Highlight, page 24

In this section, we detail a construct which will allows us to analyse, compare and classify, the different approaches to the use of games in mathematics education. We term this construct a Didactical Functionality (Cerulli et al, 2005).



* Highlight, page 24

The goal is to determine critical concerns that characterise the educational uses of information technology in mathematics education. Once such concerns are identified, it is then



* Highlight, page 25

possible to compare how different research approaches, or theoretical frameworks address the concerns.



* Highlight, page 25

1. There exists, at the very least, a tool and an educational goal. 2. The tool is employed as a means to achieving the educational goal.



* Highlight, page 25

This then identifies three key concerns: the tool, the goal and the means of achieving the goal using the tool. The latter is also referred to as a ‘modality of employment’. In turn, these form the starting point to develop didactical functionalities, defined as (Cerulli et al, 2005): ... those properties of an ICT tool and its modalities of employment, which may enhance teaching/learning processes, according to a specific educational goal.



* Highlight, page 25

Notice that, according to this definition, issues such as context, pedagogical strategies, etc., are addressed in terms of “modalities of employing” the tool. This flexibility was deliberate: it does not state a priori what aspects of the modalities of employing a tool must or must not be addressed. The idea is behind this is that such detail depends on the specific theoretical frameworks assumed for each approach. Thus, a comparison between different approaches can be done only in terms of the details provided – in the definition of didactical functionalities – for the employed tools. On the negative side, there is a risk that this could lead to a proliferation of details (provided as a description of the modalities of employment of a tool) within a given approach, making it difficult to compare different approaches. However, such complexity can be reduced by adopting a necessity principle: “not all the details of the experiments needed to be given, but only those that the team believed to be necessary conditions for the experiment to be successful according to the team’s theoretical assumptions” (Artigue et al, 2006). In other words, if specific details are not believed to be crucial for the achievement of the stated educational goal, then such details should not be considered as characteristic of the modalities of employment.



* Highlight, page 25

Potentially, there are two main ways of using the didactic functionalities: a) For a given tool one can identifying an educational goal, and defining the ways in which the tool is to



* Highlight, page 26

be employed (in the teaching/learning practice) in order to achieve the goal; b) One can start by having a modality of employment and then identify an educational goal to be addressed, and only later build the tool.



* Highlight, page 27

Tool characteristics Educational goal Modalities of employment of the tool • Provided feedback • Allow users to leave boxes unfilled • Construction of trees of expressions Understanding key concepts of fractions. Setting: pupils work in pairs; the teacher interacts with students in order to question/validate their strategies and to stimulate/support their production; the teacher orchestrates class discussions. Typologies of activities: open ended activities; verbalization of activities; class discussions highlighting and discussing the emerged strategies. General educational strategy: to enable pupils to explore open ended problems and to try out solutions to be verbalized, validated and institutionalized.



* Highlight, page 27

the production and use of mathematical games in educational settings involves a wide range of design problems: mathematical content design; pedagogical and epistemological design; game and software design; graphical and interaction design. From a research perspective we see three paradigms that relate to design: design as an object of study; design as an outcome of study and design as a method of study.



* Highlight, page 28

The Learner vis-à-vis design Druin (2002) offers an extensive and insightful review of the evolving role of children in the design of technology. Nesset and Large (2004) provide a broad and lucid taxonomy of the main theoretical trends.



* Highlight, page 28

Druin (2002) argued that for a long time, even when users are consulted in the design or evaluation of educational technologies, these are predominantly teachers or parents, and rarely the learners themselves. The interest in children as users of computer technology, 28 once sporadic and limited to educationalist (mainly from the constructionist tradition), has expanded recently to a wider community of Human—Computer Interaction (HCI) and Technology-enhanced Learning (TEL) researchers.



* Highlight, page 29

once sporadic and limited to educationalist (mainly from the constructionist tradition), has expanded recently to a wider community of Human—Computer Interaction (HCI) and Technology-enhanced Learning (TEL) researchers.



* Highlight, page 29

With this expansion comes a shift, from questions focusing on the educational impact of technology on children to the impact of children's psychology on technology design.



* Highlight, page 29

Druin (2002) states that there are four main roles which children can play in the technology design process: user, tester, informant, and design partner.



* Highlight, page 29

The degree of impact children have on design is defined by their role in two dimensions. Obviously, the closer the children are to a partner role, the broader and deeper their input to the design process. Yet there is also a temporal dimension: the closer children are to the user end of the spectrum, the latter they are engaged with the design process. Thus, as users, they are presented with a completed product, and the observations made by researchers will only feed into the design of other products. As testers, their contribution may affect subsequence versions, whereas as partners they can influence the process from its early conceptual phases.



* Highlight, page 30

In wasn't until 1997 when Scaife et al (1997) initiated a critical discussion regarding the role of children in the design process, and offered the distinction of ‘informant design’. At about the same time, child-as-partner approaches emerged, influenced by the Scandinavian participatory design movement of the 1970s.



* Highlight, page 33

From these principles, they derive a framework which includes several elements: The task model, the constituents of activity derived from the inquiry based learning literature. Obstacles encountered by learners. Scaffolding guidelines provide principles for designing scaffolds to help learners overcome the obstacles. Scaffolding strategies, more specific implementation approaches Examples In spirit, this approach converges on the idea of design patterns. However, the scaffolding strategies are too laconic to be useful as an immediate design tool, for example: 'Restrict a complex task by setting useful boundaries for learners'. The details of how to do so are provided implicitly, through a set of examples and their lengthily discussion.



* Highlight, page 34

Writing to a designer audience, (Church, 1999) introduced formal abstract design tools (FADTs) as a way to reach a shared design vocabulary. These FADTs are, despite an emphasis on formalism and abstraction from specific examples, one-sentence descriptions; the first FADTs given is in its whole “INTENTION: Making an implementable plan of one's own creation in response to the current situation in the game world and one's understanding of the game play options.” Barwood and Falstein (Falstein, 2002) suggested a more formalized method with the 400 Rules Project, which collects proven game design rules and techniques, stating these as instructions. An example of a rule from the 400 rules project:



* Highlight, page 36

As can be seen from Falstein’s section titles, (“Imperative Statement,” “Domain of Application,” “Dominated Rules,” “Dominating Rules,” and “Examples”), the rules are intended for practical game design and are less suitable for analytic studies.



* Highlight, page 37

Drawing on an impressive array of sources from design theory, artificial intelligence, architecture and education, Kafai (1995) argues for a convergence of theory of design and theory of learning.



* Highlight, page 37

Starting from Simon’s broad definition of design, she highlights the common themes: problem solving, interleaved construction of knowledge and artefacts, sensitivity to context and representation. She notes that while several design theories acknowledge the idea that every process of design is a process of learning – both on part of the learner and on part of its recipients – the focus has been on the product and not on the process. In a way, educational theory had suffered from a similar flaw – engaging with educational artefacts (methods, curricula, textbooks) as products for consumption by learners, and neglecting the potential of learning in the process of designing or creating



* Highlight, page 39

We see the design pattern approach, through our development of learning patterns, as offering a potential answer to these issues. Having a description of game design and construction activities in an pedagogical pattern language summarizes the prerequisite knowledge and expected gains in a compact format, such that a busy teacher can consult and evaluate for her needs.



* Text Note, page 41

DiSessa and Cobb 2004



* Highlight, page 41

they describe four categories of theory: Grand Theory, Orienting Frameworks, Frameworks for action and Domain specific instructional theories.



* Highlight, page 41

They answer by suggesting that design research may offer Ontological innovations – new linguistic constructs for



* Highlight, page 42

describing and discussing educational phenomena.



* Highlight, page 43

Although traditional methods of externalizing the design process, such as sketching, can allow designers to divide work time on a design to several different periods, these do not support explicit externalization of the process of designing but rather provide snapshots of specific potential designs.



* Highlight, page 43

This may not be a problem within a well-developed design community if they have a well-developed design language where the implicit assumptions are embedded in the work process. Rheinfrank and Evenson (Rheinfrank and Evenson in Winograd, 1996) describe design languages as consisting of collections of elements, principles of organization, and qualifying situations and state that three distinct purposes of a design language: embed meaning into artefacts, allow artefacts to express meaning to people, and allow artefacts to be assimilated into peoples’ lives.



* Highlight, page 43

. However, modern design may require involvement with people not fluent in a particular design language, e.g. designers from various specialities or stakeholders with no design background. Although these may understand the particular design language, as any user of a product must have, they may not be able to express themselves in the language.



* Highlight, page 43

The original definition of a design pattern positions it as a high-level specification of a 43 method of solving a problem by design which specifies the context of discussion, the particulars of the problem, and how these can be addressed by the designated design instruments. In Pattern Languages Alexander writes: Each pattern describes a problem which occurs over and over again in our environment, and then describes the core of the solution to that problem, in such a way that you can use this solution a million times over, without ever doing it the same way twice. (Alexander, 1977)



* Highlight, page 44

method of solving a problem by design which specifies the context of discussion, the particulars of the problem, and how these can be addressed by the designated design instruments. In Pattern Languages Alexander writes: Each pattern describes a problem which occurs over and over again in our environment, and then describes the core of the solution to that problem, in such a way that you can use this solution a million times over, without ever doing it the same way twice. (Alexander, 1977)



* Highlight, page 44

Each pattern is a three-part rule, which expresses a relation between a certain context, a problem, and a solution. As an element in the world, each pattern is a relationship between a certain context, a certain system of forces which occurs repeatedly in that context, and a certain spatial configuration which allows these forces to resolve themselves. As an element of language, a pattern is an instruction, which shows how this spatial configuration can be used, over and over again, to resolve the given system of forces, wherever the context makes it relevant. The pattern is, in short, at the same time a thing, which happens in the world, and the rule which tells us how to create that thing, and when we must create it. It is both a process and a thing; both a description of a thing which is alive, and a description of the process which will generate that thing. (Alexander, 1979, p 247)



* Highlight, page 44

In other words, a pattern has three facets: descriptive, normative, and collaborative. It is an analytic form, used to describe design situations and solutions, a meta-design tool, used to highlight key issues and dictate a method of resolving them, and a communicative tool enabling different communities to discuss design issues and solutions.



* Highlight, page 46

We have explored two interrelated axes of design patterns: the functional axis (what are they used for) and the value axis. Finally, we mention the subject axis – or, what are the patterns of? Alexander’s patterns are structural – they describe spatial configurations (Alexander, 1977). So are the ‘Gang of Four’ software design patterns, which describe ensembles of classes in object-oriented programming (Gamma et al, 1995). Other languages aim to design Actions (Ericksson) or Activity Systems (Guy, 2004).



* Highlight, page 46

Digiano et al (2002), for example, interweave three levels on patterns in a language for collaboration design: whole activity patterns, which describe the dynamics of human interaction, data patterns, which describe the structure and relationships of the artefacts exchanged in the process, and support patterns, detailed patterns which enable higher-order patterns to flow smoothly. The next section discusses the use of pattern languages in educational contexts. Regrettably, it seems that most of the work in this area focuses on structure of digital artefacts, and neglects the dynamics of human activity.



* Highlight, page 46

The first is the growing trend of Pedagogical Design Patterns (Anthony, 1996; Bergin 2000; Eckstein, Bargin & Sharp, 2002). The second is the development of software design patterns for educational technology (Dearden, Finlay, Allgar & Mcmanus, 2002; Avgeriou, Vogiatzis, Tzanavari and Retalis, 2004). The third is the search for patterns in related practices, such as evaluation and assessment (Barre, Chaquet & El-Kechaï, 2005).



* Highlight, page 47

Pedagogical design patterns apply the concept of design patterns to pedagogical design. The fundamental claim behind this effort is that many experienced practitioners in education have tried and tested methods of solving recurring problems or addressing common needs. Among the pioneers in this field where Anthony (1995) and later the pedagogical patterns project (http://www.pedagogicalpatterns.org/), initiated by a group of experienced software engineering and computer science educators (Bergin, 2000; Eckstein, Bergin & Sharp, 2002). They proposed a set of patterns dealing with issues ranging from the design of a college course to specific principles of computer science instruction and to concrete problems and their solutions.



* Highlight, page 47

As an example, consider Anthony's “Mix new and old” pattern: Problem: Basic concepts must be reviewed over and over, but this gets boring for many students. New concepts must be introduced, but few can handle more than 10-15% new material. Constraints and Forces: In addition, each student varies in their "learning style"; whether they learn better from doing something, seeing diagrams or demonstrations, or hearing explanations. Solution: Iterate over a concept several times. Each time, present the material in a different variation on the learning styles. Each time, mix in some new material



* Highlight, page 48

with the old. This both maintains students' interest through the review and helps them absorb the new material. Related Patterns: "Simulation Games" provide an alternative to exercises for the learning style that learns by doing. "Visible Checklist" provides an extra stimulus for the group that learns by seeing. "Colorful Analogy" provides a boost for the learn by hearing group.



* Highlight, page 48

A second arena that has seen a proliferation of design patterns over the last years is web- based educational technologies. Notable examples in this field include the E-LEN project (http://www2.tisip.no/E-LEN/) and several initiatives within the IMS-LD framework (http://www.imsglobal.org). Most of the work in this area is focused on the engineering aspects of designing, developing, deploying and evaluating good technology for web- based instruction (Frizell & Hubscher, 2002; Hernández-Leo et al, 2006; Bailey et al, 2006)



* Highlight, page 48

The interaction between student and instructor is assumed to be mediated by this communication channel. Under such circumstances, most of the effort goes into designing the representation and organization of educational content and the mechanisms by which learners interact with it (Frizell & Hubscher, 2002). Design patterns are also situated in this context, with the engineer of educational technologies as the user in mind (Avgeriou et al, 2003; Garzotto et al, 2004; Kolås & Staupe, 2004).



* Highlight, page 48

Pedagogical issued are assumed, rather than discussed, for example: “Based on a study of current pedagogical models, Merrill (2003) summarized them as



* Highlight, page 49

follows: "... the most effective learning products or environments are those that are problem-centred and involve the student in four distinct phases of learning: (1) activation of prior experience, (2) demonstration of skill, (3) application of skill and (4) integration of these skills into real-world activities". Instead of transferring facts to learners, the major focus should be on the attainment of complex skills and competencies in authentic task situations” (Koper & Olivier, 2004, pp 98)



* Highlight, page 49

A noteworthy exception is (Goodyear, 2004). In an attempt to distance himself from the dominant approaches in e-learning, Goodyear focuses on what he calls networked learning, where technology is used to promote connections between learners and foster communities which make efficient use of their resources. In this context, Goodyear emphasises patterns as a means of empowering practitioners to utilize accumulated design knowledge. His patterns are succinct and written in plain language.



* Highlight, page 49

By contrast, in practice many pattern languages have taken a highly specialized form, and have become part of a professional jargon. As an alternative, Dearden et al propose the 'facilitation' model developed by Alexander et al (1985) in the Mexicali project. In that project, an 'Architect-builder' worked with a family to enable them to design and build their own house. Very significantly, the pattern language was shared by the designer and the family, and used to present and discuss design problems and solutions. The family could refer to the pattern even when choosing an alternative design.



* Highlight, page 50

This approach also enabled the facilitator to structure the design process and communicate complex issues. On the cautionary side, practitioners reported initial difficulties and even stress associated with learning such a new approach. They also tended not to question the patterns, relying on them as given truths. These issues place extra responsibility in the role of the facilitator.



* Text Note, page 50

Group of students doing participatory design of an elearning website



* Highlight, page 50

Finally, design patterns have recently been used in the context of assessment, evaluation and analysis of learning and learning systems (Gibert-Darras et al, 2005). The aim of this work is to offer a pattern language for assessing students’ problem solving abilities, in the context of a basic Java course.



* Highlight, page 50

To conclude, with the exception of Dearden et al (2002a, 2002b), Goodyear (2004) and Bergin et al (2000, 2002) most studies which utelize design patterns in education are concerned with the hard issues of creating good educational technology and authoring content within technological systems.



* Highlight, page 51

Pedagogical patterns should be based on a theoretical layer concerning pedagogy and epistemology. Whereas for example a software design pattern may need to include justification in terms of computational efficiency and robustness, a pedagogical design pattern should include its epistemological, psychological or social dynamic rational. Unfortunately, this is rarely the case. Since most pedagogical patterns are developed by skilled practitioners (or software engineers), who have their formal grounding in computer science rather than educational sciences, they are informed by solid intuitions but lack in educational theory.



* Highlight, page 52

The shift to feature-descriptive patterns changed the types of relationships a pattern could have. Rather than the parent and child relation introduced by Alexander and used subsequently five relation type were given: instantiates, instantiated-by, modulates, modulated-by, and potentially conflicting. The instantiates | instantiated-by relation indicate when the presence of a pattern is likely to automatically make another pattern present (e.g. the use of the Dice pattern makes the Randomness pattern likely to be present as well). The modulates | modulated-by pattern describes patterns that can change the design that another pattern describes but is optional and does not guarantee the second patterns presence (e.g. the Container pattern changes the design of what a Producer- Consumer pattern describes but the presence of the latter is not dependent on the former).



* Highlight, page 55

Some design patterns which have originally been conceived in response to pragmatic engineering issues may have potential pedagogical value, if put in the right context. In (Mor et al, in press) we discuss the potential epistemic benefits of using a software design pattern called Streams in learning about number sequences.



* Text Note, page 55

Analytical aspect of patterns



* Highlight, page 58

With respect to design experiments, we believe that learning patterns might offer the potential to “managing the gap” (diSessa & Cobb, 2004) between theory and practice. For example, a learning pattern (or language thereof) could encapsulate a researchers’ knowledge in a form that is transferable and applicable to classroom situations, and is accessible to practitioners as a pragmatic resource. However, such a development would require motivated input, along with empirical experiments, from all involved parties.



