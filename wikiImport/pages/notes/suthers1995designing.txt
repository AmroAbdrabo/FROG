h1. Key ideas

Software optimized for learning might differ from software optimized for achieving a product (CSCW). 

h2. Students' limitations
  * difficulty recognizing abstract relationships implicit in scientific theories and arguments
  * difficulty focusing attention on particular problems encountered in the construction and evaluation of complex arguments
  * lack of domain knowledge
  * lack of motivation

h2. "Productive" software limitations
h3. Externalizing discussion of epistemological status of object
An object can only have one shape at a time; therefore their discussion of the epistemological status cannot be part of the diagram. 

Is this a design flaw of the graphical language? Should we use an epistemologically noncommittal representation for statements, and provide annotations with which users can record any disagreement concerning the epistemological status of a statement? 

If the goal is to “push” all discussion into the interface, perhaps these questions are answered in the affirmative. However, it may be useful to force a decision prior to entry in the diagram precisely because it stimulates discussion towards making the decision. Otherwise students might never care to discuss the difference between “data,” “claims,” “hypotheses,” and “theories.” 

h3. "Allowing errors"
Semantic constraints on the links are not enforced. 

For example, an “explains” link can be drawn from data to theory as well as from theory to data. If Belvedere were a CAD tool for use by expert members of some community of practice, there would be no point in allowing users to make such errors. However, Belvedere can- not be a CAD tool because its users do not yet share standard terminology and practice in argumentation. 

h4. Different kinds of errors
In a learning environment **we must consider the role of “errors” in the learning process**. 

Some errors may be so superficial that they are not likely to result in a useful learning experience. The interface should be designed to make these errors impossible. Users may more quickly develop a shared terminology based on constructs whose semantics are enforced. 

On the other hand, delayed or absent feedback may be more appropriate for incomplete or problematic patterns of argumentation. Immediate “correction” could prevent users from engaging in processes of theory criticism and revision that are encountered in the real world.

h2. Conclusion
**The utility of software features should be evaluated in terms of how well they stimulate the right kind of activity in the total human-computer system**

// We do not assume that local optimization of software support for isolated subtasks (e.g., making “correct” argument diagrams) always optimizes over- all task performance. Rather, our main question is: What kind of discourse is facilitated or stimulated by each feature of the interface and of the task posed to the students, and what kind of discourse is inhibited?//