h1. Haskell

  * [[http://learnyouahaskell.com/chapters|Chapters - Learn You a Haskell for Great Good!]]
----
  * [[http://stackoverflow.com/questions/1012573/getting-started-with-haskell|functional programming - Getting started with Haskell - Stack Overflow]]
  * [[http://www.youtube.com/watch?v=zZ_nI9E9g0I|▶ Redoing Make - Haskell from Scratch #1 - YouTube]]
  * [[http://yannesposito.com/Scratch/en/blog/Haskell-the-Hard-Way/|YBlog - Learn Haskell Fast and Hard]]
  * [[http://nlpwp.org/book/index.xhtml|Natural Language Processing for the Working Programmer]]
  * [[http://conway.rutgers.edu/~ccshan/wiki/blog/posts/WordNumbers1/|Word numbers, Part 1: Billion approaches]]
  * [[http://blog.ezyang.com/2011/11/how-to-read-haskell/|How to read Haskell like Python : Inside 206-105]]
  * [[https://www.fpcomplete.com/school/haskell-fast-hard/haskell-fast-hard-part-1|Haskell Fast & Hard (Part 1) - School of Haskell | FP Complete]]
  * [[http://stackoverflow.com/questions/10845179/which-haskell-ghc-extensions-should-users-use-avoid/10849782#10849782|Which Haskell (GHC) extensions should users use/avoid? - Stack Overflow]]
  * [[https://github.com/errge/hi2|errge/hi2]]
  * [[http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation/te-8510|Skills Matter : Haskell eXchange 2013: Simon Peyton Jones on]]
  * [[http://www.amazon.com/Pearls-Functional-Algorithm-Design-Richard/dp/0521513383|Pearls of Functional Algorithm Design: Richard Bird: 9780521513388: Amazon.com: Books]]
  * [[http://www.reddit.com/tb/1owylt|A Journey in learning haskell via reddit.com]]
  * [[https://vimeo.com/77168227|[ny-haskell] A Taste of Agda with Francesco Mazzoli on Vimeo]]
  * [[https://vimeo.com/77164337|[ny-haskell] Abstractions for the Functional Roboticist with Anthony Cowley on Vimeo]]
  * [[http://acm.wustl.edu/functional/haskell.php|How to learn Haskell]]
  * [[https://github.com/chris-taylor/SICP-in-Haskell|chris-taylor/SICP-in-Haskell]]
  * [[http://www.angelfire.com/tx4/cus/pl/sicp_haskell_01.html|SICP Translation - Haskell Code - Chapter #1]]
  * [[http://strikewithoutthinking.blogspot.ca/2012/09/sicp-exercise-1115.html|Explorations in Functional Programming & Haskell: SICP Exercise 1.1–1.5]]
  * [[http://alexstangl.wordpress.com/2010/03/16/sicp-exercise-solutions-in-clojure-and-haskell/|SICP Exercise solutions in Clojure and Haskell | Musemantic]]
  * [[http://learnmeahaskell.blogspot.ca/2011/02/another-sicp-post.html|Learn Me A Haskell: Another SICP Post]]
  * [[http://dis.4chan.org/read/prog/1269617273|4chan BBS - Going through SICP in Haskell]]
  * [[http://www.randomhacks.net/articles/2007/02/22/bayes-rule-and-drug-tests|Bayes' rule in Haskell, or why drug tests don't work]]
  * [[http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours|Write Yourself a Scheme in 48 Hours - Wikibooks, open books for an open world]]
  * [[http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html|A Neighborhood of Infinity: You Could Have Invented Monads! (And Maybe You Already Have.)]]
  * [[http://devcharm.com/pages/13-haskell-where-to-start|Devcharm | Haskell, where to start?]]
  * [[http://www.youtube.com/watch?v=ZhuHCtR3xq8|▶ Brian Beckman: Don't fear the Monad - YouTube]]
  * [[http://www.haskell.org/haskellwiki/H-99:_Ninety-Nine_Haskell_Problems|H-99: Ninety-Nine Haskell Problems - HaskellWiki]]
  * [[http://stackoverflow.com/questions/5683911/simple-haskell-unit-testing|Simple haskell unit testing - Stack Overflow]]
  * [[https://en.wikipedia.org/wiki/Haskell_98_features|Haskell 98 features - Wikipedia, the free encyclopedia]]
  * [[http://yannesposito.com/Scratch/en/blog/Holy-Haskell-Starter/#|YBlog - Holy Haskell Project Starter]]