h1. Fuzzy Text Matching

h2. Challenge
To be able to find a bibtex entry submitted for a paper, when another user has the same paper, however in a slightly different version (marked up PDF, or pre-print vs publisher's version).

Extract text (for example with texttopdf), and use some kind of perceptual hash.

h2. Benchmarks
I got ssdeep and simhash running (both below). SSDeep was able to index 150,000 Wikipedia HTML pages in 10 minutes (using 16% CPU, could probably be parallelized and speeded up a lot), and it correctly recognized one file that had been modified in a few ways in 0.5s. 

However, when comparing the output of pdftotext of a pre-print at [[http://ijcscl.org/?go=contents&volume=6&issue=1|ijCSCL]] with the pdftotext of the final article on [[http://www.springer.com/education+%26+language/learning+%26+instruction/journal/11412?cm_cmm=sgw-_-ps-_-journal-_-11412|Springer]], it gave a 0 match, whereas Simhash gave .77.

h2. Discussions
  * [[http://www.samba.org/ftp/unpacked/junkcode/spamsum/README|Ask proggit: are there any hash algorithm that can tell 0% - 100% likeness of two binary files? Let's say let's say hash 0xffffffff and 0xfffffffe means the two files are 87.5% alike : programming]]
  * [[http://stackoverflow.com/questions/9279688/best-library-for-fuzzy-document-match-text-fingerprinting|My question on StackOverflow]]
  * [[http://stackoverflow.com/questions/75891/algorithm-for-finding-similar-images/774916#774916|math - Algorithm for finding similar images - Stack Overflow]]
  * [[http://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html|Looks Like It - The Hacker Factor Blog]]
  * [[http://www.reddit.com/r/programming/comments/a2a6p/simple_simhashing_lineartime_clustering_for_huge/|Simple Simhashing - Linear-time clustering for huge datasets. : programming]]


h2. General papers
  * [[http://www.computer.org/portal/web/csdl/doi/10.1109/MINES.2010.138|Text's Source Trustworthiness Detection Based on Cognitive Hash - ACM]]
  * [[http://www.slidefinder.net/p/perceptual_hashing_textual_content_biryukov/rdpresentation/13667261|Perceptual Hashing of Textual Content Biryukov Maria University]] - nice overview of some algorithms (slides)
  * [[http://en.wikipedia.org/wiki/Locality_sensitive_hashing|Locality-sensitive hashing - Wikipedia, the free encyclopedia]]
  * [[http://en.wikipedia.org/wiki/MinHash|MinHash - Wikipedia, the free encyclopedia]]

h2. Simhash
Developed by Google, apparently patented by them. A number of implementations.
h3. About (formal)
  * [[http://dl.acm.org/citation.cfm?id=509965|Original paper (ACM)]]
  * [[http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=6079770|IEEE Xplore - On the Effectiveness of Simhash for Detecting Near-Miss Clones in Large Scale Software Systems]]
  * [[http://www.acl2011.org/accepted/82.html|Semi-Supervised SimHash for Efficient Document Similarity Search (paper)]]
  * [[https://docs.google.com/viewer?a=v&q=cache:U_TxqcqWeKcJ:www.cs.odu.edu/~sjone/courses/cs895f11/cs895-ir-assign1-presentation.pptx+&hl=en&gl=ca&pid=bl&srcid=ADGEESjToEbP5_Ja0Ir5s5HcF-XtemjHVwQu90LUDNy_zoiZZUzc7RuadWiNVV4CGQZU-jFWXv4dbpjXKVCrTPskwelS0CyGj4pacM9NPIOR62PvlV090Z9t26i35R0SGPpasBK8J1HR&sig=AHIEtbQUfD9rW1IeoSjsfWezLQzvHvXPWA|Useful slides]]

h3. About (informal)
  * [[http://moultano.wordpress.com/article/simple-simhashing-3kbzhsxyg4467-6/|Simple Simhashing – Ryan Moulton's Articles]]
  * [[http://matpalm.com/resemblance/simhash/|simhash]] - about the algorithm
  * [[http://tupalo.com/en/blog/simhash-in-ruby/|Simhash in Ruby | The Tupalo.com Blog]]

h3. Implementations
  * [[http://simhash.codeplex.com/SourceControl/changeset/changes/67584|C# implementation of SimHash]]
  * [[http://svcs.cs.pdx.edu/gitweb?p=simhash.git;a=summary|C implementation]]
  * [[https://github.com/vkandy/simhash-js|Javascript implementation]]
  * [[http://rubydoc.info/gems/simhash/0.2.5/frames|Ruby simhash gem documentation]] [[https://github.com/bookmate/simhash|github pages]]

h3. Usage (C implementation)
<code>simhash -w *.txt</code> write hash for each file to <file>.sim
<code>simhash -c hashfile1 hashfile2</code> show distance between two hash files (normalized to 0..1)
<code>simhash -m *.txt</code> output similarity matrix for all files

h2. SSDeep
  * Initially algorithm developed as part of [[http://www.samba.org/ftp/unpacked/junkcode/spamsum/README|Spamsum]]
  * [[http://ssdeep.sourceforge.net/|Project page]]
  * [[http://redstack.net/blog/2010/04/10/ssdeep-ruby-bindings/|redstack » Blog Archive » Ssdeep Ruby Bindings]]

h3. Usage
<code>
ssdeep -p *.txt 
</code>

finds all matches among all the files selected

<code>
ssdeep *.txt > hashes.txt
</code>

writes hashes for each file to stdout (or hashes.txt with redirect)

<code>
ssdeep -m hashes.txt newfile.txt 
</code>

matches a new textfile to the list of hashes in hashes.txt

h2. PHash
Does images, video and audio, as well as text. Has a Ruby gem. C library has a way of persisting hashes and rapidly matching large numbers, but no Ruby bridge exists.

  * [[http://www.phash.org/download/|pHash.org: Home of pHash, the open source perceptual hash library]]
  * [[http://www.reddit.com/r/programming/comments/8375c/phash_the_open_source_perceptual_hash_library/|Reddit discussion]]
  * [[http://www.mikeperham.com/2010/05/21/detecting-duplicate-images-with-phashion/|Detecting Duplicate Images with Phashion]] - Ruby gem that only does images
  * [[http://rubydoc.info/gems/pHash/1.1.1/frames|PHash gem]] - does all four categories, but no persistent datastore

h2. Bibliographic Hash Key
BibSonomy has apparently developed a way of hashing a bibtex entry to be able to deduplicate publication submissions

  * [[http://www.gbv.de/wikis/cls/Bibliographic_Hash_Key|Bibliographic Hash Key – Verbund-Wiki GBV]]
  * [[http://www.bibsonomy.org/help/doc/inside.html|BibSonomy - Inside BibSonomy]]

h2. Other
  * [[http://chaobin.me/blog/63/Perceptual+hash+algorithm+-+Python+Implementation/|Perceptual Hash Algorithm - Python Implementation]]
  * [[http://lshkit.sourceforge.net/|LSHKIT: LSHKIT: A C++ Locality Sensitive Hashing Library]]
----
  * [[https://github.com/andrewclegg/sketchy|andrewclegg/sketchy · GitHub]]