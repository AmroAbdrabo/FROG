apiVersion: v1
kind: ConfigMap
metadata:
  name: frog-cm
  labels:
    app: frog
data:
  METEOR_SETTINGS: |
    {
      "sendLogsToExternalDashboardServer": true,
      "public": {
          "friendlyProduction": true,
          "sharedburl": "ws://minikube/sharedb",
          "dashboard_server_url": "http://minikube/dashboard" 
      },
      "sharedb_dburl": "mongodb://mongo-test-service:27017",
      "sharedb_redis": "redis-test-service:6379",
      "logserverRedis" : "redis://redis-test-service:6379",
      "externalOperatorRedis": "redis://redis-test-service:6379",
      "token": "9f8sd0f98sdfj3j4jFFFF111",
      "Minio": { "urls": ["https://icchilisrv3.epfl.ch:9000"]}
    }

  ROOT_URL: http://minikube
  MONGO_URL: mongodb://mongo-test-service:27017/meteor
  PORT: "3000"

--- 

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frog-test-deployment
  labels:
    app: frog
    env-type: test

spec:
  replicas: 1
  selector:
    matchLabels:
      app: frog
      tier: backend
      env-type: test

  # POD declaration
  template:
    metadata:
      labels:
        app: frog
        tier: backend
        env-type: test

    spec:
      containers:
        - name: frog-2
          image: arasmumcuyan/frog:test
          imagePullPolicy: Always
          command: ["node", "main.js"]
          ports:
            - containerPort: 3000
            - containerPort: 3002
          envFrom:
            - configMapRef:
                name: frog-cm

      # TODO: maybe find a better to set regred instead of command line
      imagePullSecrets:
        - name: regcred

---
######## Service Configuration ########
######## Open an external port to outside of the cluster, type=NodePort ##########
kind: Service
apiVersion: v1
metadata:
  name: frog-app-service
spec:
  selector: # for pods     
    app: frog
    env-type: test
  
  type: ClusterIP # external port it was (NodePort)
  ports:
  - port: 3000   # port of service will be listening from Node (will be sent to service on behalf of end-user)
    # nodePort: 32395
    targetPort: 3000   # port of pod is listening which service wiil forward
    protocol: TCP

---
######## Service Configuration ########
######## Open an external port to outside of the cluster, type=NodePort ##########
kind: Service
apiVersion: v1
metadata:
  name: frog-sharedb-service
spec:
  selector: # for pods     
    app: frog
    env-type: test
  
  type: ClusterIP # external port 
  ports:
  - port: 3002   # port of service will be listening from Node (will be sent to service on behalf of end-user)
    targetPort: 3002   # port of pod is listening which service wiil forward
